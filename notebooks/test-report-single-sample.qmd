---
title: "Load a single sample using fishpond"
format: html
---

Source: <https://combine-lab.github.io/alevin-fry-tutorials/2023/simpleaf-piscem/> (step 3)

## Libraries

```{r}
#| message: false
library(cowplot)
library(fishpond)
library(ggplot2)
library(rtracklayer)
library(scales)
library(stringr)
```

## Parameters

```{r}
alevin_quant_dir <- "/ceph/project/cncb/albrecht/snakemake-cncb-ensembl-2024/results/alevin"
gtf_file <- "/ceph/project/cncb/albrecht/snakemake-cncb-ensembl-2024/resources/genome/genome.gtf.gz"
sample_index <- 1L
timepoint_levels <- c("m048hrs", "m024hrs", "p000hrs", "p024hrs", "p048hrs", "p072hrs", "p096hrs", "p120hrs")
replicate_levels <- c("1", "2")
umi_cutoff <- 500
```

## Load alevin results

```{r}
sample_basedirs <- list.files(path = alevin_quant_dir, include.dirs = TRUE)
sample_basedir <- sample_basedirs[sample_index]
sample_basedir
```

```{r}
#| message: false
sce <- loadFry(fryDir = file.path(alevin_quant_dir, sample_basedir, "af_quant"), outputFormat = "S+A", nonzero = TRUE)
sce
```

## Rename barcodes

```{r}
colnames(sce) <- paste0(colnames(sce), "-", sample_basedir)
sce
```

## Add sample name to cell metadata

```{r}
colData(sce)[["sample"]] <- sample_basedir
sce
```

## Separate sample metadata

```{r}
tmp <- str_match(string = colData(sce)[["sample"]], pattern = "WPP(?<timepoint>[mp][[:digit:]]{3}hrs)_rep(?<replicate>[[:digit:]]{1})")
tmp <- tmp[, -1]
tmp <- as(tmp, "DataFrame")
tmp$timepoint <- factor(tmp$timepoint, levels = timepoint_levels)
tmp$replicate <- factor(tmp$replicate, levels = replicate_levels)
colData(sce) <- append(colData(sce), tmp)
rm(tmp)
sce
```

## Add gene annotations

```{r}
tmp <- import(gtf_file)
tmp <- unique(mcols(tmp)[, c("gene_id", "gene_name")])
rownames(tmp) <- tmp$gene_id
rowData(sce)[["gene_name"]] <- tmp[rowData(sce)$gene_ids, "gene_name"]
rm(tmp)
sce
```

## Export raw object

```{r}
saveRDS(sce, sprintf("sce.raw.%s.rds", sample_basedir))
```

## Basic quality control

```{r}
colData(sce)[["sum"]] <- colSums(assay(sce, "counts"))
```

```{r}
range(colData(sce)[["sum"]])
```

```{r}
tmp <- data.frame(
  sum = sce$sum,
  rank = rank(-sce$sum)
) %>% 
  filter(sum > 0)
tmp_top <- tmp %>% 
  slice_max(sum, n = 1)
tmp_umi_cutoff <- data.frame(
  sum = umi_cutoff,
  rank = sum(tmp$sum >= umi_cutoff)
)
gg_barcode_rank_plot <- ggplot(tmp, aes(rank, sum)) +
  geom_point() +
  geom_label(aes(label = sum), data = tmp_top) +
  geom_label(aes(label = rank), data = tmp_umi_cutoff) +
  scale_x_log10() +
  scale_y_log10(limits = c(1, NA), labels = scales::comma) +
  labs(
    subtitle = sprintf("Max UMI & Number of cells >= %s UMI", umi_cutoff)
  ) +
  theme_bw()
rm(tmp, tmp_top, tmp_umi_cutoff)
gg_barcode_rank_plot
```

```{r}
#| fig-width: 12
#| fig-height: 4
gg1 <- ggplot(colData(sce), aes(x = sum)) +
  geom_histogram(binwidth = 100) +
  labs(title = "Full view") +
  theme_bw()
gg2 <- ggplot(colData(sce), aes(x = sum)) +
  geom_histogram(binwidth = 100) +
  geom_vline(xintercept = umi_cutoff, color = "red", linetype = "dashed") +
  coord_cartesian(xlim = c(0, 5E3)) +
  labs(title = "Total UMI (0 - 10,000)") +
  theme_bw()
gg3 <- ggplot(colData(sce), aes(x = sum)) +
  geom_histogram(binwidth = 100) +
  geom_vline(xintercept = umi_cutoff, color = "red", linetype = "dashed") +
  coord_cartesian(xlim = c(0, 5E3), ylim = c(0, 5E3)) +
  labs(title = "Total UMI (0 - 5,000) & Bin count (0 - 5,000)") +
  theme_bw()
gg4 <- ggplot(colData(sce), aes(x = sum)) +
  geom_histogram(binwidth = 100) +
  coord_cartesian(xlim = c(5E3, NA), ylim = c(0, 100)) +
  labs(title = "Total UMI (5,000 - max) & Bin count (0 - 100)") +
  theme_bw()
plot_grid(gg1, gg2, gg3, gg4)
rm(gg1, gg2, gg3, gg4)
```

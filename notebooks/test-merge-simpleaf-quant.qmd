---
title: "Load a single sample using fishpond"
format: html
---

Source: <https://combine-lab.github.io/alevin-fry-tutorials/2023/simpleaf-piscem/> (step 3)

## Libraries

```{r}
library(bluster)
library(BiocSingular)
library(cowplot)
library(ggplot2)
library(rtracklayer)
library(SingleCellExperiment)
library(scater)
library(scran)
library(scuttle)
library(tidyverse)
```

## Load gene annotations

```{r}
gtf_data <- import("/ceph/project/cncb/albrecht/snakemake-cncb-ensembl-2024/resources/genome/genome.gtf.gz")
colnames(mcols(gtf_data))
```

## Load data for all samples in a loop

```{r}
alevin_quant_dir <- "/ceph/project/cncb/albrecht/snakemake-cncb-ensembl-2024/results/alevin"
sample_basedirs <- list.files(path = alevin_quant_dir, include.dirs = TRUE)
sample_basedirs
```

```{r}
sce_list <- lapply(X = file.path(alevin_quant_dir, sample_basedirs, "af_quant"), FUN = fishpond::loadFry, outputFormat = "scRNA")
names(sce_list) <- sample_basedirs
names(sce_list)
```


```{r}
feature_names <- rownames(sce_list[[1]])
for (sample_name in names(sce_list)) {
  message("* Checking sample ", sample_name)
  stopifnot(identical(feature_names, rownames(sce_list[[sample_name]])))
  message("  [OK] Feature names")
}
```

## Merge all samples

```{r}
for (sample_name in names(sce_list)) {
  tmp_sce <- sce_list[[sample_name]]
  tmp_sce$sample <- sample_name
  colnames(tmp_sce) <- paste0(colnames(tmp_sce), "-", sample_name)
  sce_list[[sample_name]] <- tmp_sce
  rm(tmp_sce)
}
sce <- do.call("cbind", sce_list)
rm(sce_list)
sce
```

## Separate sample metadata

```{r}
tmp <- as.data.frame(do.call(
  what = "rbind",
  args = strsplit(
  x = gsub(pattern = "WPP([mp])([[:digit:]]{3})hrs_rep([[:digit:]]{1})", replacement = "\\1-\\2-\\3", x = colData(sce)[["sample"]]),
  split = "-"
  )
))
colnames(tmp) <- c("mp", "time", "rep")
tmp <- mutate(
  tmp,
  across(everything(), as.factor)
)
colData(sce) <- cbind(colData(sce), tmp)
sce$sampleNoRep <- gsub("_rep[12]", "", sce$sample)
colData(sce)
rm(tmp)
```

## Add gene annotations

```{r}
tmp_annotations <- unique(mcols(gtf_data)[, c("gene_id", "gene_name")])
rownames(tmp_annotations) <- tmp_annotations$gene_id
rowData(sce)[["gene_name"]] <- tmp_annotations[rowData(sce)$gene_ids, "gene_name"]
rm(tmp_annotations)
sce
```

## Basic quality control

```{r}
umi_cutoff <- 300
```


```{r}
colData(sce)[["sum"]] <- colSums(assay(sce, "counts"))
range(colData(sce)[["sum"]])
```

```{r}
tmp <- data.frame(
  sum = sce$sum,
  rank = rank(-sce$sum)
) %>% 
  filter(sum > 0)
tmp_top <- tmp %>% 
  slice_max(sum, n = 1)
tmp_umi_cutoff <- data.frame(
  sum = umi_cutoff,
  rank = sum(tmp$sum >= umi_cutoff)
)
ggplot(tmp, aes(rank, sum)) +
  geom_point() +
  geom_label(aes(label = sum), data = tmp_top) +
  geom_label(aes(label = rank), data = tmp_500) +
  scale_x_log10() +
  scale_y_log10(limits = c(1, NA)) +
  labs(
    subtitle = sprintf("Max UMI & Number of cells >= %s UMI", umi_cutoff)
  )
rm(tmp, tmp_top, tmp_umi_cutoff)
```

```{r}
#| fig-width: 12
#| fig-height: 4
gg1 <- ggplot(colData(sce), aes(x = sum)) +
  geom_histogram(binwidth = 100) +
  labs(title = "Full view") +
  theme_bw()
gg2 <- ggplot(colData(sce), aes(x = sum)) +
  geom_histogram(binwidth = 100) +
  geom_vline(xintercept = umi_cutoff, color = "red", linetype = "dashed") +
  coord_cartesian(xlim = c(0, 5E3)) +
  labs(title = "Total UMI (0 - 10,000)") +
  theme_bw()
gg3 <- ggplot(colData(sce), aes(x = sum)) +
  geom_histogram(binwidth = 100) +
  geom_vline(xintercept = umi_cutoff, color = "red", linetype = "dashed") +
  coord_cartesian(xlim = c(0, 5E3), ylim = c(0, 5E3)) +
  labs(title = "Total UMI (0 - 5,000) & Bin count (0 - 5,000)") +
  theme_bw()
gg4 <- ggplot(colData(sce), aes(x = sum)) +
  geom_histogram(binwidth = 100) +
  coord_cartesian(xlim = c(5E3, NA), ylim = c(0, 100)) +
  labs(title = "Total UMI (5,000 - max) & Bin count (0 - 100)") +
  theme_bw()
plot_grid(gg1, gg2, gg3, gg4)
rm(gg1, gg2, gg3, gg4)
```

```{r}
sce <- sce[, sce$sum >= umi_cutoff]
sce
```

## Naive downstream analysis

```{r}
sce <- logNormCounts(sce)
sce
```

```{r}
dec <- modelGeneVar(sce)
dec
```

```{r}
fit <- metadata(dec)
plot(fit$mean, fit$var, xlab="Mean of log-expression",
    ylab="Variance of log-expression")
curve(fit$trend(x), col="dodgerblue", add=TRUE, lwd=2)
```

```{r}
chosen <- getTopHVGs(dec, prop=0.1)
str(chosen)
```

```{r}
set.seed(100) # See below.
sce <- fixedPCA(sce, subset.row=chosen) 
reducedDimNames(sce)
```

```{r}
set.seed(1100101001)
sce <- runUMAP(sce, dimred="PCA")
```

```{r}
#| fig-width: 14
#| fig-height: 3
# "barcodes"   "sample"     "sum"        "mp"         "time"       "rep"        "sizeFactor"
tmp <- data.frame(
  reducedDim(sce, "UMAP")
) %>% 
  cbind(colData(sce))
gg1 <- ggplot(tmp, aes(UMAP1, UMAP2)) +
  geom_point(size = 0.1) +
  theme_light()
gg2 <- ggplot(tmp, aes(UMAP1, UMAP2, colour = mp)) +
  geom_point(size = 0.1) +
  theme_light()
gg3 <- ggplot(tmp, aes(UMAP1, UMAP2, colour = time)) +
  geom_point(size = 0.1) +
  theme_light()
plot_grid(gg1, gg2, gg3, nrow = 1)
rm(tmp)
```

```{r}
#| fig-width: 14
#| fig-height: 3
tmp <- data.frame(
  reducedDim(sce, "UMAP")
) %>% 
  cbind(colData(sce))
ggplot(tmp, aes(UMAP1, UMAP2, colour = time)) +
  geom_point(size = 0.1) +
  facet_grid(rep ~ sampleNoRep) +
  theme_light()
rm(tmp)
```
